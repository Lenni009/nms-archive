[[FX]]
// -----------------------------------------------------------------------------------
// Samplers
// -----------------------------------------------------------------------------------

sampler gBufferMap = sampler_state
{
	Address = Clamp;
	TexUnit = 0;
};

sampler gBuffer1Map = sampler_state
{
	Address = Clamp;
	TexUnit = 1;
};

sampler gBuffer2Map = sampler_state
{
	Address = Clamp;
	TexUnit = 2;
};

sampler gBuffer3Map = sampler_state
{
	Address = Clamp;
	TexUnit = 3;
};

sampler gBuffer4Map = sampler_state
{
	Address = Clamp;
	TexUnit = 4;
};

sampler gBuffer5Map = sampler_state
{
	Address = Clamp;
	TexUnit = 5;
};

sampler gBuffer6Map = sampler_state
{
	Address = Clamp;
	TexUnit = 6;
};

sampler gBuffer7Map = sampler_state
{
    Address = Clamp;
    TexUnit = 7;
};

sampler gBuffer8Map = sampler_state
{
    Address = Clamp;
    TexUnit = 8;
};

sampler gSobol1SppMap = sampler_state
{
    DefaultTexture  = SHADER/SOBOL1SPP.DDS;
    SamplingOptions = On;
    Filter  = None;
    Address = Clamp;
    TexUnit = 9;
};

sampler gSobol2SppMap = sampler_state
{
    DefaultTexture  = SHADER/SOBOL2SPP.DDS;
    SamplingOptions = On;
    Filter  = None;
    Address = Clamp;
    TexUnit = 10;
};

sampler gScramble1SppMap = sampler_state
{
    DefaultTexture  = SHADER/SCRAMBLE1SPP.DDS;
    SamplingOptions = On;
    Filter  = None;
    Address = Clamp;
    TexUnit = 11;
};

sampler gScramble2SppMap = sampler_state
{
    DefaultTexture  = SHADER/SCRAMBLE2SPP.DDS;
    SamplingOptions = On;
    Filter  = None;
    Address = Clamp;
    TexUnit = 12;
};

sampler gRank1SppMap = sampler_state
{
    DefaultTexture  = SHADER/RANK1SPP.DDS;
    SamplingOptions = On;
    Filter  = None;
    Address = Clamp;
    TexUnit = 13;
};

sampler gRank2SppMap= sampler_state
{
    DefaultTexture  = SHADER/RANK2SPP.DDS;
    SamplingOptions = On;
    Filter  = None;
    Address = Clamp;
    TexUnit = 14;
};

sampler gFallbackTexture = sampler_state
{
    DefaultTexture  = TESTS/AMBIENTMAP.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 15;
};

sampler gFallbackTexture2 = sampler_state
{
    DefaultTexture  = TESTS/AMBIENTMAP.DDS;
    SamplingOptions = On;
    MaxAnisotropy   = 0;
    Filter  = Trilinear;
    Address = Clamp;
    TexUnit = 16;
};

// -----------------------------------------------------------------------------------
// Uniforms
// -----------------------------------------------------------------------------------

// custom
float4 gCustomParamsVec4    = { 0, 0, 0, 0 };

// blur
float4 gBlurParamsVec4      = { 0, 0, 0, 0 };

// cubemap
float4 gCubeMapPosVec4      = { 0.0, 0.0, 0.0, 0.0 };
float4 gCubeMapExtentsVec4  = { 0.0, 0.0, 0.0, 0.0 };

// -----------------------------------------------------------------------------------
// Contexts
// -----------------------------------------------------------------------------------

context SSR_MARCH
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_MARCH;
}

context SSR_DILATE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_DILATE;
}

context SSR_RADIANCE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_RADIANCE;
}

context SSR_VISIBILITY_MASK
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_VISIBILITY_MASK;
}

context SSR_RESOLVE
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_RESOLVE;
}

context SSR_TEMPORAL
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_TEMPORAL;
}

context SSR_MEDIAN
{
    VertexShader    = compile GLSL VS_FSQUAD;
    PixelShader     = compile GLSL FS_SSR_MEDIAN;
}

[[VS_FSQUAD]]
// =================================================================================================
#define D_TEX_QUAD
#include "ImmediateModeVertex.shader.h"

[[FS_SSR_MARCH]]
// =================================================================================================
#define D_SSR_MARCH
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_DILATE]]
// =================================================================================================
#define D_SSR_DILATE
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_RADIANCE]]
// =================================================================================================
#define D_SSR_RADIANCE
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_VISIBILITY_MASK]]
// =================================================================================================
#define D_SSR_VISIBILITY_MASK
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_RESOLVE]]
// =================================================================================================
#define D_SSR_RESOLVE
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_TEMPORAL]]
// =================================================================================================
#define D_SSR_TEMPORAL
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"

[[FS_SSR_MEDIAN]]
// =================================================================================================
#define D_SSR_MEDIAN
#define D_SSR_SHADER
#include "Fullscreen/SSRFragment.shader.h"