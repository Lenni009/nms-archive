[[FX]]

sampler gDiffuseMap = sampler_state
{
	TexUnit = 0;
};

sampler gNormalMap = sampler_state
{
	TexUnit = 1;
};


sampler gDetailDiffuseMap = sampler_state
{
    TexUnit = 2;
};

sampler gDetailNormalMap = sampler_state
{
    TexUnit = 3;
};

sampler gDiffuse2Map = sampler_state
{
	TexUnit = 4;
};

sampler gMasksMap = sampler_state
{
	TexUnit = 5;
};

sampler gFeaturesMap = sampler_state
{
    TexUnit = 6;
};

sampler gCausticMap = sampler_state
{
    TexUnit = 7;
};

sampler gCausticOffsetMap = sampler_state
{
    TexUnit = 8;
};

sampler gShadowMap = sampler_state
{
    TexUnit = 9;
};

sampler gCloudShadowMap = sampler_state
{
    TexUnit = 10;
};

sampler gDualPMapFront = sampler_state
{
    TexUnit = 11;
};

sampler gDualPMapBack = sampler_state
{
    TexUnit = 12;
};

sampler gOverlayDiffuseMap = sampler_state
{
    TexUnit = 13;
    Address = Wrap;
};

sampler gOverlayNormalMap = sampler_state
{
    TexUnit = 14;
    Address = Wrap;
};

sampler gOverlayMasksMap = sampler_state
{
    TexUnit = 15;
    Address = Wrap;
};

sampler gNoiseMap = sampler_state
{
    DefaultTexture = SHADER/CLOUDNOISE.DDS;
    TexUnit = 16;
    Address = Wrap;
};

sampler gPerlin3D = sampler_state
{
    DefaultTexture = SHADER/NOISEHALF.DDS;
    TexUnit = 17;
    Address = Wrap;
};

sampler gFadeNoiseMap = sampler_state
{
    DefaultTexture = SHADER/BLUENOISE.DDS;
    TexUnit = 18;
    Address = Wrap;
};

sampler gDepthBuffer = sampler_state
{
    Address = Clamp;
    TexUnit = 19;
};

sampler gBufferMap = sampler_state
{
    Address = Clamp;
    TexUnit = 20;
};

sampler gStencilBuffer = sampler_state
{
	TexUnit = 21;
};

sampler gDistortionMap = sampler_state
{
    Address = Wrap;
    Filter = Trilinear;
    MaxAnisotropy = 0;
    TexUnit = 1;
};

sampler gAlphaMap = sampler_state
{
    Address = Clamp;
    Filter = Trilinear;
    MaxAnisotropy = 0;
    TexUnit = 2;
    DefaultTexture = COMMON/WHITE.DDS;
};

// Uniforms

float4 gUVScrollStepVec4    = {0.0, 0.0, 0.0, 0.0};
float4 gLightOriginVec4     = { 0.0, 0.0, 0.0, 0.0 };

float4 gMultiTextureVec4    = {1.0, 0.0, 0.0, 0.0};
float4 gHeavyAirFadeOutVec4 = {1.0, 0.0, 0.0, 0.0};
float4 gRefractionParamsVec4 = {0.0, 0.0, 1.0, 0.0}; //x = refraction strength x, refraction strength y, z = refraction colour boost

float4 gMaterialParamsVec4 = { 1.0, 1.0, 0.0, 0.0 };

float4 gDistortionUvScrollStep = { 0.0, 1.0, 2.0, 3.0 };  // xy = scroll step for diffuse, zw = scroll step for distortion
float4 gDistortionScale_Unused = { 0.0, 0.0, 0.0, 0.0 };  // x = scale for distortion, y = switch for distortion neutral movement, zw = unused


// Contexts

context TRANSLUCENT
{
    VertexShader = compile GLSL VS_TRANSLUCENT;
    PixelShader  = compile GLSL FS_TRANSLUCENT;
}

context TRANSLUCENT_R
{
    VertexShader = compile GLSL VS_TRANSLUCENT_REACTIVE;
    PixelShader  = compile GLSL FS_TRANSLUCENT_REACTIVE;
}

context TRANSLUCENT_SOFT
{
    VertexShader = compile GLSL VS_TRANSLUCENT;
    PixelShader  = compile GLSL FS_TRANSLUCENT_SOFT;
}

context TRNSLCNT_R_SOFT
{
    VertexShader = compile GLSL VS_TRANSLUCENT_REACTIVE;
    PixelShader  = compile GLSL FS_TRANSLUCENT_REACTIVE_SOFT;
}

context TRNSLCNT_ADDITIVE
{
    VertexShader = compile GLSL VS_TRANSLUCENT;
    PixelShader  = compile GLSL FS_TRANSLUCENT_SOFT_ADDITIVE;
}

context TRNSLCNT_R_ADDITIVE
{
    VertexShader = compile GLSL VS_TRANSLUCENT_REACTIVE;
    PixelShader  = compile GLSL FS_TRANSLUCENT_REACTIVE_SOFT_ADDITIVE;
}

context LQ_TRNSLCNT_ADDITIVE
{
    VertexShader = compile GLSL VS_TRANSLUCENT;
    PixelShader  = compile GLSL FS_TRANSLUCENT_SOFT_ADDITIVE_LOW_QUALITY;
}

context LQ_TRNSLCNT_R_ADDITIVE
{
    VertexShader = compile GLSL VS_TRANSLUCENT_REACTIVE;
    PixelShader  = compile GLSL FS_TRANSLUCENT_REACTIVE_SOFT_ADDITIVE_LOW_QUALITY;
}

context HEAVYAIR_SOFT
{
    VertexShader = compile GLSL VS_HEAVYAIR_SOFT;
    PixelShader  = compile GLSL FS_HEAVYAIR_SOFT;
}

context HEAVYAIR_R_SOFT
{
    VertexShader = compile GLSL VS_HEAVYAIR_REACTIVE_SOFT;
    PixelShader  = compile GLSL FS_HEAVYAIR_REACTIVE_SOFT;
}

context HVR_ADDITIVE
{
    VertexShader = compile GLSL VS_HEAVYAIR_SOFT;
    PixelShader  = compile GLSL FS_HEAVYAIR_SOFT_ADDITIVE;
}

context HVR_R_ADDITIVE
{
    VertexShader = compile GLSL VS_HEAVYAIR_REACTIVE_SOFT;
    PixelShader  = compile GLSL FS_HEAVYAIR_REACTIVE_SOFT_ADDITIVE;
}

context LQ_HVR_ADDITIVE
{
    VertexShader = compile GLSL VS_HEAVYAIR_SOFT;
    PixelShader  = compile GLSL FS_HEAVYAIR_SOFT_ADDITIVE_LOW_QUALITY;
}

context LQ_HVR_R_ADDITIVE
{
    VertexShader = compile GLSL VS_HEAVYAIR_REACTIVE_SOFT;
    PixelShader  = compile GLSL FS_HEAVYAIR_REACTIVE_SOFT_ADDITIVE_LOW_QUALITY;
}

context HEAVYAIR
{
    VertexShader = compile GLSL VS_HEAVYAIR;
    PixelShader  = compile GLSL FS_HEAVYAIR;
}

context HEAVYAIR
{
    VertexShader = compile GLSL VS_HEAVYAIR_REACTIVE;
    PixelShader  = compile GLSL FS_HEAVYAIR_REACTIVE;
}

context [ MACOS ] TRLCNT_SOFT_NOR
{
	VertexShader = compile GLSL VS_TRANSLUCENT;
	PixelShader = compile GLSL FS_TRANSLUCENT_SOFT_NORM;
}

context [ IOS ] TRLCNT_SOFT_NOR
{
    VertexShader = compile GLSL VS_TRANSLUCENT;
    PixelShader = compile GLSL FS_TRANSLUCENT_SOFT_NORM;
}

context [ MACOS ] HVYAIR_SOFT_NOR
{
	VertexShader = compile GLSL VS_HEAVYAIR_SOFT;
	PixelShader = compile GLSL FS_HEAVYAIR_SOFT_NORM;
}

context [ IOS ] HVYAIR_SOFT_NOR
{
    VertexShader = compile GLSL VS_HEAVYAIR_SOFT;
    PixelShader = compile GLSL FS_HEAVYAIR_SOFT_NORM;
}

[[VS_TRANSLUCENT]]
// =================================================================================================
#include "ParticleVertex.shader.h"

[[VS_TRANSLUCENT_REACTIVE]]
// =================================================================================================
#define D_REACTIVE
#include "ParticleVertex.shader.h"

[[FS_TRANSLUCENT]]
// =================================================================================================
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_REACTIVE]]
// =================================================================================================
#define D_REACTIVE
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_SOFT]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ALPHA_PARTICLES
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_REACTIVE_SOFT]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ALPHA_PARTICLES
#define D_REACTIVE
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_SOFT_ADDITIVE]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_FULL_RES_PARTICLES
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_REACTIVE_SOFT_ADDITIVE]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_FULL_RES_PARTICLES
#define D_REACTIVE
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_SOFT_ADDITIVE_LOW_QUALITY]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_REACTIVE_SOFT_ADDITIVE_LOW_QUALITY]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_REACTIVE
#include "ParticleFragment.shader.h"

[[FS_TRANSLUCENT_SOFT_NORM]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_DEPTH_LINEAR_NORM
#include "ParticleFragment.shader.h"

[[VS_HEAVYAIR]]
// =================================================================================================
#define D_HEAVYAIR
#include "ParticleVertex.shader.h"

[[VS_HEAVYAIR_REACTIVE]]
// =================================================================================================
#define D_HEAVYAIR
#define D_REACTIVE
#include "ParticleVertex.shader.h"

[[FS_HEAVYAIR]]
// =================================================================================================
#define D_HEAVYAIR
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_REACTIVE]]
// =================================================================================================
#define D_HEAVYAIR
#define D_REACTIVE
#include "ParticleFragment.shader.h"

[[VS_HEAVYAIR_SOFT]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_HEAVYAIR
#include "ParticleVertex.shader.h"

[[VS_HEAVYAIR_REACTIVE_SOFT]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_HEAVYAIR
#define D_REACTIVE
#include "ParticleVertex.shader.h"

[[FS_HEAVYAIR_SOFT]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_HEAVYAIR
#define D_ALPHA_PARTICLES
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_REACTIVE_SOFT]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_HEAVYAIR
#define D_ALPHA_PARTICLES
#define D_REACTIVE
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_SOFT_ADDITIVE]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_HEAVYAIR
#define D_FULL_RES_PARTICLES
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_REACTIVE_SOFT_ADDITIVE]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_HEAVYAIR
#define D_FULL_RES_PARTICLES
#define D_REACTIVE
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_SOFT_ADDITIVE_LOW_QUALITY]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_HEAVYAIR
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_REACTIVE_SOFT_ADDITIVE_LOW_QUALITY]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_ADDITIVE_PARTICLES
#define D_HEAVYAIR
#define D_REACTIVE
#include "ParticleFragment.shader.h"

[[FS_HEAVYAIR_SOFT_NORM]]
// =================================================================================================
#define D_SOFT_PARTICLES
#define D_HEAVYAIR
#define D_DEPTH_LINEAR_NORM
#include "ParticleFragment.shader.h"
