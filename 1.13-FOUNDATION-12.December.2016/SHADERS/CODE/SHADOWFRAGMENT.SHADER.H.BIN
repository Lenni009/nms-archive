
#if defined( _F02_SKINNED )
    #define D_SKINNING_UNIFORMS
#endif

#if defined( _F32_LEAF )
    #define D_FADE
#endif

#define D_SHADOW

#include "Common/Defines.shader.h"
#include "Common/CommonUniforms.shader.h"
#include "Common/CommonDepth.shader.h"

#include "UberCommon.h"

#if defined( D_FADE )
#include "Common/CommonFade.shader.h"
#endif

DECLARE_INPUT
    IN_SCREEN_POSITION

#if defined( D_TERRAIN )
    INPUT( vec4, mScreenSpacePositionVec4, TEXCOORD0 )
#else
//#ifdef _F11_ALPHACUTOUT
    INPUT( vec4, mTexCoordsVec4,           TEXCOORD0 )
//#endif
#endif

#if defined( D_FADE ) && defined( D_INSTANCE )
    INPUT_NOINTERP( float, mfFadeValueForInstance,    TEXCOORD1 )
#endif    


#ifdef _F32_LEAF
    INPUT( vec4, mWorldPositionVec3_mfFadeValueForInstance,        TEXCOORD3 )
    INPUT( vec3, mTangentSpaceNormalVec3, TEXCOORD6 )
#endif

#if defined( _F44_IMPOSTER )
    INPUT( vec2, mPixelZandW, TEXCOORD9 )
#endif

DECLARE_END


#ifdef D_PLATFORM_ORBIS
#if defined(_F44_IMPOSTER )
FRAGMENT_MAIN_COLOUR_DEPTH_SRT
#elif defined( _F11_ALPHACUTOUT ) || defined( D_FADE )
VOID_MAIN_COLOUR_SRT
#else
VOID_MAIN_COLOUR_EARLYZ_SRT
#endif
#else
FRAGMENT_MAIN_COLOUR_SRT
#endif
{ 

#ifdef D_FADE    
    
    #ifdef D_TERRAIN

       CheckFade(
            SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFadeNoiseMap ),
            IN( mScreenSpacePositionVec4 ),
            lUniforms.mpCommonPerMesh->gfFadeValue );    
        
    #else

        vec4 lTexCoords = IN( mTexCoordsVec4 );
        #if defined( _F44_IMPOSTER )
        lTexCoords *= lUniforms.mpCustomPerMaterial->gImposterDataVec4.x;
        #endif

        CheckFadeUber(
            SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFadeNoiseMap ),
            lTexCoords,
    #ifdef  D_INSTANCE             
             IN( mfFadeValueForInstance ) 
    #else
             lUniforms.mpCommonPerMesh->gfFadeValue                     
    #endif             
             );
    
    #endif

#endif

    #ifdef _F01_DIFFUSEMAP
    {
        #if defined( _F11_ALPHACUTOUT )
        {
            vec4 lDiffuseColourVec4 = vec4(1.0, 1.0, 1.0, 1.0);
            vec4 lTexCoordsVec4;

            lTexCoordsVec4 = IN(mTexCoordsVec4);

            lDiffuseColourVec4 = texture2D(lUniforms.mpCustomPerMaterial->gDiffuseMap, lTexCoordsVec4.xy);

            if ( lDiffuseColourVec4.a < 0.5 ) // needs to be alpharef passed into constant buffer
            {
                discard;
            }
        }
        #endif 
    }
    #endif
    
    #if defined( _F32_LEAF )
        vec3 lViewDirVec3  = normalize( lUniforms.mpPerFrame->gViewPositionVec3                 - IN( mWorldPositionVec3_mfFadeValueForInstance ).xyz );
        vec3 lLightDirVec3 = normalize( MAT4_GET_COLUMN( lUniforms.mpPerFrame->gCameraMat4, 3 ) - IN( mWorldPositionVec3_mfFadeValueForInstance ).xyz );

        float lfNdotCam   = 1.0 - acos( abs( dot( lViewDirVec3, normalize( IN( mTangentSpaceNormalVec3 ).xyz ) ) ) ) / ( 3.14 * 0.5 );
        float lfNdotLight = 1.0 - acos( abs( dot( lLightDirVec3, normalize( IN( mTangentSpaceNormalVec3 ).xyz ) ) ) ) / ( 3.14 * 0.5 );

        if( lfNdotCam < 0.5 )
        {
            CheckFadeUber(
                SAMPLER2DPARAM( lUniforms.mpCustomPerMaterial->gFadeNoiseMap ),
                IN( mTexCoordsVec4 ),
                lfNdotCam * 2.0 );
        }

    #endif

    #if defined( _F44_IMPOSTER )
        // Output modified imposter depth to avoid crap self shadowing artefacts.
        //vec4 lTexCoordsImp = IN( mTexCoordsVec4 );
        
        //lTexCoordsImp *= lUniforms.mpCustomPerMaterial->gImposterDataVec4.x;

        float lfImposterDepth = IN( mPixelZandW.x );
        FRAGMENT_DEPTH = lfImposterDepth;
    #endif


#ifdef D_PLATFORM_ORBIS

    //FRAGMENT_COLOUR = vec4(0.0);

#else

    float lfShadowAlpha = 1.0;

#ifdef D_FADE
    lfShadowAlpha *= lUniforms.mpCommonPerMesh->gfFadeValue;
#endif

    FRAGMENT_COLOUR = vec4(1.0, 0.0, 1.0, lfShadowAlpha);

#endif    
    
}