[[FX]]

// Samplers

sampler gDiffuseMap = sampler_state
{
    TexUnit = 0;
};

sampler gNormalMap = sampler_state
{
    TexUnit = 1;
};


sampler gDetailDiffuseMap = sampler_state
{
    TexUnit = 2;
};

sampler gDetailNormalMap = sampler_state
{
    TexUnit = 3;
};

sampler gDiffuse2Map = sampler_state
{
    TexUnit = 4;
};

sampler gMasksMap = sampler_state
{
    TexUnit = 5;
};

sampler gCausticMap = sampler_state
{
    TexUnit = 6;
};

sampler gCausticOffsetMap = sampler_state
{
    TexUnit = 7;
};

sampler gShadowMap = sampler_state
{
    TexUnit = 8;
};

sampler gCloudShadowMap = sampler_state
{
    TexUnit = 9;
};

sampler gDualPMapFront = sampler_state
{
    TexUnit = 10;
};

sampler gDualPMapBack = sampler_state
{
    TexUnit = 11;
};

sampler gHSVOverlay = sampler_state
{
    DefaultTexture = SHADER/MACROVARIATION.DDS;
    TexUnit = 12;
    Address = Wrap;
};

sampler gHSVNormalOverlay = sampler_state
{
    DefaultTexture = SHADER/MACROVARIATION.NORMAL.DDS;
    TexUnit = 13;
    Address = Wrap;
};

sampler gNoiseMap = sampler_state
{
    DefaultTexture = SHADER/CLOUDNOISE.DDS;
    TexUnit = 14;
    Address = Wrap;
};

sampler gPerlin3D = sampler_state
{
    DefaultTexture = SHADER/NOISEHALF.DDS;
    TexUnit = 15;
    Address = Wrap;
};

sampler gFadeNoiseMap = sampler_state
{
    DefaultTexture = SHADER/BLUENOISE.DDS;
    TexUnit = 16;
    Address = Wrap;
};

sampler gDepthBuffer = sampler_state
{
    Address = Clamp;
    TexUnit = 17;
};

sampler gBufferMap = sampler_state
{
    Address = Clamp;
    TexUnit = 18;
};

sketchcode TEST
{
    Flag         "Reduce_AA_Blur"        = D_CLAMP_AA;
    Flag         "AlphaCutout"           = _F11_ALPHACUTOUT;
    Flag         "DisregardVertexColour" = D_DISREGARD_VERTCOLOUR;
    Flag         "DisregardDisplacement" = D_DISREGARD_DISPLACEMENT;

    InputColour  "Colour"         = vec4 lColourVec4;
    InputColour  "TangentNormal"  = vec3 lSkInNormal;
    InputColour  "WorldNormal1"   = vec3 lSkInWorldNormal1;
    InputColour  "WorldNormal2"   = vec3 lSkInWorldNormal2;
    InputColour  "WorldNormalBlended" = vec3 lSkInWorldNormal;
    InputVector  "Metallic"       = float lfMetallic;
    InputVector  "Roughness"      = float lfRoughness;
    InputVector  "Subsurface"     = float lfSubsurface;
    InputVector  "GlobalTime"     = float lfSkGlobalTime;
    InputVector  "Glow"           = float lfGlow;
    InputVector  "UV_1"           = vec2 lSkUv1;
    InputVector  "UV_2"           = vec2 lSkUv2;
    InputVector  "UserData"       = vec4 lSkUserData;
    InputVector  "LocalPosition"  = vec3 lSkLocalPositionVec3;
    InputVector  "WorldPosition"  = vec3 lSkWorldPositionVec3;
    InputVector  "NodePosition"   = vec3 lSkNodePositionVec3;
    InputVector  "PlanetPosition" = vec3 lSkPlanetPositionVec3;
    InputVector  "CameraPosition" = vec3 lSkCameraPositionVec3;
    InputVector  "CameraDirection" = vec3 lSkCameraDirectionVec3;
    InputVector  "SunPosition"    = vec3 lSkSunPositionVec3;
    InputColour  "VertexColour"   = vec4 lSkVertexColour;
    InputVector  "ShellHeight"    = float lfShellHeight;
    InputVector  "PositionDisplacement" = vec3 lSkPositionDisplacement;
    InputVector  "NormalDisplacement"   = vec3 lSkNormalDisplacement;
 
    InputTexture "Diffuse_1"    = sampler gDiffuseMap;
    InputTexture "Diffuse_2"    = sampler gDiffuse2Map;
    InputTexture "Normal"       = sampler gNormalMap;
    InputTexture "Noise"        = sampler gFadeNoiseMap;
    InputMaskTex "Masks"        = sampler gMasksMap;
    InputTexture "Normal_2"     = sampler gDetailNormalMap;
    
    OutputColour "Colour"        = vec4 lfOutColour;
    OutputColour "TangentNormal" = vec3 lOutNormal;
    OutputVector "Metallic"      = float lfOutMetallic;
    OutputVector "Roughness"     = float lfOutRoughness;
    OutputVector "Subsurface"    = float lfOutSubsurface;
    OutputVector "Glow"          = float lfOutGlow;
    OutputVector "LocalPosition" = vec3 lfOutLocalPosition;
    OutputVector "ShellsOffset"  = vec3 lvOutShellsOffset;

    NeededFlag = lfOutGlow            _F34_GLOW;
    NeededFlag = gFadeNoiseMap        D_NOISE_MAP;
    NeededFlag = lSkLocalPositionVec3 D_SK_USE_LOCAL_POSITION;
    NeededFlag = gDiffuse2Map         D_SKETCH_DIFFUSE2;
    NeededFlag = gDetailNormalMap     D_SKETCH_NORMAL2;

    InputTexture "DualPMapFront" = sampler gDualPMapFront;
    InputTexture "DualPMapBack" = sampler gDualPMapBack;

    NeededFlag = gDualPMapFront D_SKETCH_LIGHT_MAPS;
    NeededFlag = gDualPMapBack D_SKETCH_LIGHT_MAPS;
}


// Uniforms

// Planet
float4 gPlanetPositionVec4				= {0.0, -1204.0, 0.0, 1204.0};
float4 gLightOriginVec4   = {0.0, 0.0, 0.0, 0.0}; 
float4 gInverseWorldUpMat4 = { 0.0, 0.0, 0.0, 0.0 };

// Lighting
float4 gMaterialParamsVec4              = {0.9, 0.5, 0.0, 0.5};
float4 gMaterialSFXVec4                 = { 0.0, 0.0, 0.0, 0.0 };
float4 gMaterialSFXColVec4              = { 0.0, 0.0, 0.0, 0.0 };

// Texturing
float4 gMaterialColourVec4              = {1.0, 1.0, 1.0, 1.0};
float4 gUVScrollStepVec4                = {0.0, 0.0, 0.0, 0.0};
float4 gCustomParams02Vec4              = {0.0, 1.0, 1.0, 0.0};
float4 gCustomParams01Vec4              = {0.0, 0.0, 0.0, 0.0};

// Vertex Displacement
float4 gWaveOneAmplitudeAndPosOffsetV4           = {0.0, 0.0, 0.0, 0.0};
float4 gWaveOneFrequencyVec4                     = {0.0, 0.0, 0.0, 0.0};
float4 gWaveOneFallOffAndSpeedVec4               = {0.0, 0.0, 0.0, 0.0};
float4 gWaveTwoAmplitudeVec4                     = {0.0, 0.0, 0.0, 0.0};
float4 gWaveTwoFrequencyVec4                     = {0.0, 0.0, 0.0, 0.0};
float4 gWaveTwoFallOffAndSpeedVec4               = {0.0, 0.0, 0.0, 0.0};

// Fog
float4 gSkyColourVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gHorizonColourVec4               = {1.0, 0.0, 1.0, 0.0};
float4 gSunColourVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gWaterFogColourNearVec4             = {1.0, 0.0, 1.0, 0.0};
float4 gWaterFogColourFarVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gWaterFogVec4                    = {1.0, 0.0, 1.0, 0.0};
float4 gFogColourVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceHorizonColourVec4          = {1.0, 0.0, 1.0, 0.0};
float4 gHeightFogColourVec4             = {1.0, 0.0, 1.0, 0.0};
float4 gHeightFogParamsVec4             = {1.0, 0.0, 1.0, 0.0};
float4 gFogParamsVec4                   = {1.0, 0.0, 1.0, 0.0};
float4 gScatteringParamsVec4            = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceFogParamsVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceSkyColourVec4              = {1.0, 0.0, 1.0, 0.0};
float4 gSunPositionVec4                 = {1.0, 0.0, 1.0, 0.0};
float4 gSpaceScatteringParamsVec4       = {1.0, 0.0, 1.0, 0.0};
float4 gLightTopColourVec4              = {1.0, 1.0, 1.0, 1.0};
float4 gPlaneSpotPositionVec4           = {0.0, 0.0, 0.0, 0.0};

// Scan
float4 gScanParamsPosVec4               = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg1Vec4              = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg2Vec4              = {0.0, 0.0, 0.0, 0.0};
float4 gScanParamsCfg3Vec4              = {0.0, 0.0, 0.0, 0.0};
float4 gScanColourVec4                  = {0.0, 0.0, 0.0, 0.0};

float4 gImposterDataVec4				= {16.0, 0.0, 0.0, 0.0};
float4 gAlphaCutoutThresholdVec4        = {0.45, 0.5, 0.0, 0.0};

float4 gTileBlendScalesVec4         = {8.0, 0.5, 2.0, 2.0};
float4 gImposterDebug                   = {0.0, 0.0, 1.0, 0.0};

float4 gTerrainColour1Vec4;
float4 gTerrainColour2Vec4;

float4 gUserDataVec4                    = {0.0, 0.0, 0.0, 0.0};
float4 gUITransparencyVec4              = {1.0, 0.0, 0.0, 0.0};

// Dissolve
float4 gDissolveDataVec4                = { 0.0, 0.0, 0.0, 0.0 };

// Contexts

context SHADOW_FADE
{
    VertexShader = compile GLSL VS_SHADOW_FADE;
    PixelShader = compile GLSL FS_SHADOW_FADE;
    SketchContext = TEST;
}

context LIT_FORWARD
{
    VertexShader = compile GLSL VS_GENERAL;
    PixelShader  = compile GLSL FS_LIT_FORWARD;
    SketchContext = TEST;
    GeometryShader [ _F33_SHELLS ]   = compile GLSL GS_LIT_FORWARD;
}

// VR UI
context UI_FORWARD
{
    VertexShader = compile GLSL VS_UI_FORWARD;
    PixelShader  = compile GLSL FS_UI_FORWARD;
    SketchContext = TEST;
}

context DEPTHONLY_FRWRD
{
    VertexShader = compile GLSL VS_DEPTHONLY_FRWRD;
    PixelShader  = compile GLSL FS_DEPTHONLY_FRWRD;
    SketchContext = TEST;
}

context LIT_FORWARD_WITH_MASK
{
    VertexShader = compile GLSL VS_GENERAL;
    GeometryShader [ _F33_SHELLS ]   = compile GLSL GS_LIT_FORWARD_WITH_MASK;
    PixelShader  = compile GLSL FS_LIT_FORWARD_WITH_MASK;
    SketchContext = TEST;
}

context ICON_FORWARD_NS
{
    VertexShader = compile GLSL VS_GENERAL_NS;
    GeometryShader [ _F33_SHELLS ] = compile GLSL GS_ICON_FORWARD_NS;
    PixelShader = compile GLSL FS_ICON_FORWARD_NS;
    SketchContext = TEST;
}

context LIT_DEFER
{
    VertexShader = compile GLSL VS_DEFER;
    PixelShader  = compile GLSL FS_LIT_DEFER;
    SketchContext = TEST;
    GeometryShader [ _F33_SHELLS ] = compile GLSL GS_DEFER;
}

context DEPTH_CLEAR
{
    VertexShader = compile GLSL VS_DEPTH_CLEAR;
    PixelShader  = compile GLSL FS_DEPTH_CLEAR;
    SketchContext = TEST;
}
context SHADOW_INSTANCE_FADE
{
    VertexShader = compile GLSL VS_SHADOW_INSTANCE_FADE;
    PixelShader = compile GLSL FS_SHADOW_INSTANCE_FADE;
    SketchContext = TEST;

    Instanced = true;
}

context LIT_FORWARD_INSTANCE
{
    VertexShader = compile GLSL VS_INSTANCE;
    PixelShader  = compile GLSL FS_LIT_FORWARD_INSTANCE;
    SketchContext = TEST;

    Instanced = true;
}

context LIT_DEFER_INSTANCE
{
    VertexShader = compile GLSL VS_DEFER_INSTANCE;
    PixelShader  = compile GLSL FS_LIT_DEFER_INSTANCE;
    SketchContext = TEST;

    Instanced = true;
}

context LIT_DEFER_ZE_INSTANCE
{
    VertexShader = compile GLSL VS_DEFER_ZE_INSTANCE;
    PixelShader  = compile GLSL FS_LIT_DEFER_ZE_INSTANCE;
    SketchContext = TEST;

    Instanced = true;
}

context DEPTHONLY_DEFER_INSTANCE
{
    VertexShader = compile GLSL VS_DEPTHONLY_DEFER_INSTANCE;
    PixelShader = compile GLSL FS_DEPTHONLY_DEFER_INSTANCE;
    SketchContext = TEST;

    Instanced = true;
}

context IMPOSTER_COLOUR
{
    VertexShader = compile GLSL VS_DEFER_IMPOSTER;
    PixelShader  = compile GLSL FS_IMPOSTER_COLOUR;
    SketchContext = TEST;
}

context IMPOSTER_NORMAL
{
    VertexShader = compile GLSL VS_DEFER_IMPOSTER;
    PixelShader  = compile GLSL FS_IMPOSTER_NORMAL;
    SketchContext = TEST;
}

context IMPOSTER_MASK
{
    VertexShader = compile GLSL VS_DEFER_IMPOSTER;
    PixelShader  = compile GLSL FS_IMPOSTER_MASK;
    SketchContext = TEST;
}

context PLANESPOT
{
    VertexShader = compile GLSL VS_PLANE_SPOT;
    PixelShader  = compile GLSL FS_PLANE_SPOT;
    SketchContext = TEST;
}


[[VS_GENERAL]]
// =================================================================================================
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[VS_GENERAL_NS]]
// =================================================================================================
#define D_NO_SHADOWS
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[VS_PLANE_SPOT]]
// =================================================================================================
#define D_PLANE_SPOT
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[VS_DEFER]]
// =================================================================================================
#define D_DEFER
#define D_OUTPUT_MOTION_VECTORS

#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[GS_DEFER]]
// =================================================================================================
#define D_DEFER
#define D_OUTPUT_MOTION_VECTORS

#emit_sketchcode TEST
#include "UberGeometry.shader.h"

[[VS_DEFER_IMPOSTER]]
// =================================================================================================
#define D_DEFER
#define D_IMPOSTER_VERTEX
#include "UberVertex.shader.h"

[[FS_LIT_FORWARD]]
// =================================================================================================
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[GS_LIT_FORWARD]]
// =================================================================================================
#emit_sketchcode TEST
#include "UberGeometry.shader.h"

[[FS_LIT_FORWARD_WITH_MASK]]
// =================================================================================================
#define D_LIT_WITH_MASK
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[GS_LIT_FORWARD_WITH_MASK]]
// =================================================================================================
#define D_LIT_WITH_MASK
#emit_sketchcode TEST
#include "UberGeometry.shader.h"

[[GS_ICON_FORWARD_NS]]
// =================================================================================================
#define D_NO_SHADOWS
#define D_NO_POSTPROCESS
#define D_NO_GLOW
#emit_sketchcode TEST
#include "UberGeometry.shader.h"

[[FS_ICON_FORWARD_NS]]
// =================================================================================================
#define D_NO_SHADOWS
#define D_NO_POSTPROCESS
#define D_NO_GLOW
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[FS_LIT_DEFER]]
// =================================================================================================
#define D_DEFER
#define D_ATTRIBUTES
#define D_OUTPUT_MOTION_VECTORS

#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[VS_DEPTH_CLEAR]]
// =================================================================================================
#define D_DEFER
#define D_DEPTH_CLEAR
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[GS_DEPTH_CLEAR]]
// =================================================================================================
#define D_DEFER
#define D_DEPTH_CLEAR
#emit_sketchcode TEST
#include "UberGeometry.shader.h"

[[FS_DEPTH_CLEAR]]
// =================================================================================================
#define D_DEFER
#define D_DEPTH_CLEAR
#include "UberFragment.shader.h"

[[VS_SHADOW_INSTANCE]]
// =================================================================================================
#define D_FADE
#define D_INSTANCE
#include "ShadowVertex.shader.h"

[[FS_SHADOW_INSTANCE]]
// =================================================================================================
#define D_FADE
#define D_INSTANCE
#include "ShadowFragment.shader.h"

[[VS_SHADOW_FADE]]
// =================================================================================================
#define D_FADE
#include "ShadowVertex.shader.h"

[[FS_SHADOW_FADE]]
// =================================================================================================
#define D_FADE
#include "ShadowFragment.shader.h"

[[VS_SHADOW_INSTANCE_FADE]]
// =================================================================================================
#define D_FADE
#define D_INSTANCE
#include "ShadowVertex.shader.h"

[[FS_SHADOW_INSTANCE_FADE]]
// =================================================================================================
#define D_FADE
#define D_INSTANCE
#include "ShadowFragment.shader.h"

[[VS_DEFER_INSTANCE]]
// =================================================================================================
#define D_DEFER
#define D_INSTANCE
#define D_OUTPUT_MOTION_VECTORS
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[VS_DEFER_ZE_INSTANCE]]
// =================================================================================================
#define D_DEFER
#define D_INSTANCE
#define D_OUTPUT_MOTION_VECTORS
#define D_ZEQUALS
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[VS_DEPTHONLY_DEFER_INSTANCE]]
// =================================================================================================
#define D_DEFER
#define D_INSTANCE
#define D_DEPTHONLY
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[VS_INSTANCE]]
// =================================================================================================
#define D_INSTANCE
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[FS_LIT_FORWARD_INSTANCE]]
// =================================================================================================
#define D_INSTANCE
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[FS_LIT_DEFER_INSTANCE]]
// =================================================================================================
#define D_INSTANCE
#define D_DEFER
#define D_ATTRIBUTES
#define D_OUTPUT_MOTION_VECTORS
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[FS_LIT_DEFER_ZE_INSTANCE]]
// =================================================================================================
#define D_INSTANCE
#define D_DEFER
#define D_ATTRIBUTES
#define D_OUTPUT_MOTION_VECTORS
#define D_ZEQUALS
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[FS_DEPTHONLY_DEFER_INSTANCE]]
// =================================================================================================
#define D_INSTANCE
#define D_DEFER
#define D_DEPTHONLY
#include "UberFragment.shader.h"

[[FS_IMPOSTER_COLOUR]]
// =================================================================================================
#define D_IMPOSTER_COLOUR
#define D_DEFER
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[FS_IMPOSTER_NORMAL]]
// =================================================================================================
#define D_IMPOSTER_NORMAL
#define D_DEFER
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[FS_IMPOSTER_MASK]]
// =================================================================================================
#define D_IMPOSTER_MASK
#define D_DEFER
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[FS_PLANE_SPOT]]
// =================================================================================================
#define D_PLANE_SPOT
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[VS_UI_FORWARD]]
// =================================================================================================
#define D_NO_SHADOWS
#define D_REMOVE_TAA_JITTER
#define D_UI_OVERLAY
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[FS_UI_FORWARD]]
// =================================================================================================
#define D_NO_SHADOWS
#define D_NO_POSTPROCESS
#define D_NO_GLOW
#define D_UI_OVERLAY
#emit_sketchcode TEST
#include "UberFragment.shader.h"

[[VS_DEPTHONLY_FRWRD]]
// =================================================================================================
#define D_NO_SHADOWS
#define D_DEPTHONLY
#emit_sketchcode TEST
#include "UberVertex.shader.h"

[[FS_DEPTHONLY_FRWRD]]
// =================================================================================================
#define D_DEPTHONLY
#define D_NO_POSTPROCESS
#define D_NO_SHADOWS
#include "UberFragment.shader.h"